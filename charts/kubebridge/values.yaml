# Default values for kubebridge.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
global:
  logLevel: info
  nameOverride: ""
  fullnameOverride: ""

  image:
    repository: hayk96/kubebridge
    # Overrides the image tag whose default is the chart appVersion.
    tag: "v0.1.0-alpha.2"

sync:
  replicaCount: 1
  imagePullPolicy: IfNotPresent
  imagePullSecrets: []
  k8sServiceSyncIntervalSeconds: "3"
  allowNamespaces: ["*"]
  denyNamespaces: ["kube-system", "kube-public"]
  allowServiceTypes:
    - NodePort
    - ClusterIP
    - LoadBalancer

  service:
    type: ClusterIP

  rbac:
    create: true

  serviceAccount:
    # Specifies whether a service account should be created
    create: true
    # Annotations to add to the service account
    annotations: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: ""

  podAnnotations: {}

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
  ## @param sync.livenessProbe.initialDelaySeconds Initial delay seconds for livenessProbe
  ## @param sync.livenessProbe.periodSeconds Period seconds for livenessProbe
  ## @param sync.livenessProbe.timeoutSeconds Timeout seconds for livenessProbe
  ## @param sync.livenessProbe.failureThreshold Failure threshold for livenessProbe
  ## @param sync.livenessProbe.successThreshold Success threshold for livenessProbe

  livenessProbe:
    httpGet:
      path: /health
      port: 8080
    initialDelaySeconds: 5
    timeoutSeconds: 3
    periodSeconds: 10
    successThreshold: 1
    failureThreshold: 6

  ## @param sync.readinessProbe.initialDelaySeconds Initial delay seconds for readinessProbe
  ## @param sync.readinessProbe.periodSeconds Period seconds for readinessProbe
  ## @param sync.readinessProbe.timeoutSeconds Timeout seconds for readinessProbe
  ## @param sync.readinessProbe.failureThreshold Failure threshold for readinessProbe
  ## @param sync.readinessProbe.successThreshold Success threshold for readinessProbe
  ##

  readinessProbe:
    httpGet:
      path: /ready
      port: 8080
    initialDelaySeconds: 5
    timeoutSeconds: 5
    periodSeconds: 10
    successThreshold: 1
    failureThreshold: 6

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  nodeSelector: {}

  tolerations: []

  affinity: {}

dns:
  domain: kube.bridge
  replicaCount: 1
  imagePullPolicy: IfNotPresent
  imagePullSecrets: []

  extraDNSConfig: |
    {
      "A": {
        "kubebridge.io.": [
          "127.0.0.1"
        ]
      },
      "CNAME": {
        "kube-bridge.io": "kubebridge.io."
      }
    }

  serviceAccount:
    # Specifies whether a service account should be created
    create: true
    # Annotations to add to the service account
    annotations: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: ""

  podAnnotations: {}

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
  ## @param dns.livenessProbe.initialDelaySeconds Initial delay seconds for livenessProbe
  ## @param dns.livenessProbe.periodSeconds Period seconds for livenessProbe
  ## @param dns.livenessProbe.timeoutSeconds Timeout seconds for livenessProbe
  ## @param dns.livenessProbe.failureThreshold Failure threshold for livenessProbe
  ## @param dns.livenessProbe.successThreshold Success threshold for livenessProbe

  livenessProbe:
    httpGet:
      path: /health
      port: 8080
    initialDelaySeconds: 5
    timeoutSeconds: 3
    periodSeconds: 10
    successThreshold: 1
    failureThreshold: 6

  ## @param dns.readinessProbe.initialDelaySeconds Initial delay seconds for readinessProbe
  ## @param dns.readinessProbe.periodSeconds Period seconds for readinessProbe
  ## @param dns.readinessProbe.timeoutSeconds Timeout seconds for readinessProbe
  ## @param dns.readinessProbe.failureThreshold Failure threshold for readinessProbe
  ## @param dns.readinessProbe.successThreshold Success threshold for readinessProbe
  ##

  readinessProbe:
    httpGet:
      path: /ready
      port: 8080
    initialDelaySeconds: 5
    timeoutSeconds: 5
    periodSeconds: 10
    successThreshold: 1
    failureThreshold: 6

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  nodeSelector: {}

  tolerations: []

  affinity: {}

redis:
  enabled: true
  master:
    podLabels:
      app: redis
    persistence:
      enabled: false
    extraFlags:
      - "--maxmemory-policy allkeys-lru"
  replica:
    replicaCount: 0
  auth:
    enabled: true
    generatePassword: true
    existingSecret: "redis-secret"
